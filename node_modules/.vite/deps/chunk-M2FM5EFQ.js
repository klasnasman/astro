import {
  __commonJS
} from "./chunk-AC2VUBZ6.js";

// node_modules/fizzy-ui-utils/utils.js
var require_utils = __commonJS({
  "node_modules/fizzy-ui-utils/utils.js"(exports, module) {
    (function(global, factory) {
      if (typeof module == "object" && module.exports) {
        module.exports = factory(global);
      } else {
        global.fizzyUIUtils = factory(global);
      }
    })(exports, function factory(global) {
      let utils = {};
      utils.extend = function(a, b) {
        return Object.assign(a, b);
      };
      utils.modulo = function(num, div) {
        return (num % div + div) % div;
      };
      utils.makeArray = function(obj) {
        if (Array.isArray(obj))
          return obj;
        if (obj === null || obj === void 0)
          return [];
        let isArrayLike = typeof obj == "object" && typeof obj.length == "number";
        if (isArrayLike)
          return [...obj];
        return [obj];
      };
      utils.removeFrom = function(ary, obj) {
        let index = ary.indexOf(obj);
        if (index != -1) {
          ary.splice(index, 1);
        }
      };
      utils.getParent = function(elem, selector) {
        while (elem.parentNode && elem != document.body) {
          elem = elem.parentNode;
          if (elem.matches(selector))
            return elem;
        }
      };
      utils.getQueryElement = function(elem) {
        if (typeof elem == "string") {
          return document.querySelector(elem);
        }
        return elem;
      };
      utils.handleEvent = function(event) {
        let method = "on" + event.type;
        if (this[method]) {
          this[method](event);
        }
      };
      utils.filterFindElements = function(elems, selector) {
        elems = utils.makeArray(elems);
        return elems.filter((elem) => elem instanceof HTMLElement).reduce((ffElems, elem) => {
          if (!selector) {
            ffElems.push(elem);
            return ffElems;
          }
          if (elem.matches(selector)) {
            ffElems.push(elem);
          }
          let childElems = elem.querySelectorAll(selector);
          ffElems = ffElems.concat(...childElems);
          return ffElems;
        }, []);
      };
      utils.debounceMethod = function(_class, methodName, threshold) {
        threshold = threshold || 100;
        let method = _class.prototype[methodName];
        let timeoutName = methodName + "Timeout";
        _class.prototype[methodName] = function() {
          clearTimeout(this[timeoutName]);
          let args = arguments;
          this[timeoutName] = setTimeout(() => {
            method.apply(this, args);
            delete this[timeoutName];
          }, threshold);
        };
      };
      utils.docReady = function(onDocReady) {
        let readyState = document.readyState;
        if (readyState == "complete" || readyState == "interactive") {
          setTimeout(onDocReady);
        } else {
          document.addEventListener("DOMContentLoaded", onDocReady);
        }
      };
      utils.toDashed = function(str) {
        return str.replace(/(.)([A-Z])/g, function(match, $1, $2) {
          return $1 + "-" + $2;
        }).toLowerCase();
      };
      let console = global.console;
      utils.htmlInit = function(WidgetClass, namespace) {
        utils.docReady(function() {
          let dashedNamespace = utils.toDashed(namespace);
          let dataAttr = "data-" + dashedNamespace;
          let dataAttrElems = document.querySelectorAll(`[${dataAttr}]`);
          let jQuery = global.jQuery;
          [...dataAttrElems].forEach((elem) => {
            let attr = elem.getAttribute(dataAttr);
            let options;
            try {
              options = attr && JSON.parse(attr);
            } catch (error) {
              if (console) {
                console.error(`Error parsing ${dataAttr} on ${elem.className}: ${error}`);
              }
              return;
            }
            let instance = new WidgetClass(elem, options);
            if (jQuery) {
              jQuery.data(elem, namespace, instance);
            }
          });
        });
      };
      return utils;
    });
  }
});

export {
  require_utils
};
//# sourceMappingURL=chunk-M2FM5EFQ.js.map
